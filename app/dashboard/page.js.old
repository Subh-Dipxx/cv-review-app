'use client';

import { useState, useEffect } from 'react';
import { useUser } from '@clerk/nextjs';
import Link from 'next/link';

// Chart component using CSS for simple bar charts
function EngineerChart({ data }) {
  const maxCount = Math.max(...Object.values(data), 1);
  const colors = {
    'Software Engineer': 'bg-blue-500',
    'Frontend Developer': 'bg-green-500',
    'Backend Developer': 'bg-purple-500',
    'Full Stack Developer': 'bg-orange-500',
    'Data Engineer': 'bg-red-500',
    'DevOps Engineer': 'bg-yellow-500',
    'Mobile Developer': 'bg-pink-500',
    'Other': 'bg-gray-500'
  };

  return (
    <div className="space-y-4">
      {Object.entries(data).map(([type, count]) => (
        <div key={type} className="flex items-center space-x-4">
          <div className="w-32 text-sm font-medium text-gray-700 truncate">
            {type}
          </div>
          <div className="flex-1 bg-gray-200 rounded-full h-6 relative">
            <div
              className={`h-6 rounded-full ${colors[type] || 'bg-gray-500'} transition-all duration-1000 ease-out`}
              style={{ width: `${(count / maxCount) * 100}%` }}
            ></div>
            <span className="absolute right-2 top-0 h-6 flex items-center text-xs font-medium text-gray-600">
              {count}
            </span>
          </div>
        </div>
      ))}
    </div>
  );
}

function RecentUploadsChart({ recentData }) {
  const maxUploads = Math.max(...recentData.map(d => d.count), 1);
  
  return (
    <div className="flex items-end space-x-2 h-48">
      {recentData.map((day, index) => (
        <div key={index} className="flex-1 flex flex-col items-center">
          <div className="w-full bg-gray-200 rounded-t relative" style={{ height: '180px' }}>
            <div
              className="w-full bg-blue-500 rounded-t absolute bottom-0 transition-all duration-1000 ease-out"
              style={{ height: `${(day.count / maxUploads) * 100}%` }}
            ></div>
          </div>
          <div className="mt-2 text-xs text-gray-600 text-center">
            <div className="font-medium">{day.count}</div>
            <div>{day.date}</div>
          </div>
        </div>
      ))}
    </div>
  );
}

export default function DashboardPage() {
  const { user } = useUser();
  const [analytics, setAnalytics] = useState({
    totalResumes: 0,
    engineerTypes: {},
    recentUploads: [],
    processingStats: {
      successful: 0,
      failed: 0,
      pending: 0
    }
  });
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    fetchAnalytics();
  }, []);

  const fetchAnalytics = async () => {
    try {
      const response = await fetch('/api/analytics');
      if (response.ok) {
        const data = await response.json();
        setAnalytics(data);
      } else {
        // Fallback with mock data for demonstration
        setAnalytics({
          totalResumes: 45,
          engineerTypes: {
            'Software Engineer': 12,
            'Frontend Developer': 8,
            'Backend Developer': 6,
            'Full Stack Developer': 10,
            'Data Engineer': 4,
            'DevOps Engineer': 3,
            'Mobile Developer': 2
          },
          recentUploads: [
            { date: 'Mon', count: 5 },
            { date: 'Tue', count: 8 },
            { date: 'Wed', count: 3 },
            { date: 'Thu', count: 12 },
            { date: 'Fri', count: 7 },
            { date: 'Sat', count: 4 },
            { date: 'Sun', count: 6 }
          ],
          processingStats: {
            successful: 42,
            failed: 2,
            pending: 1
          }
        });
      }
    } catch (error) {
      console.error('Failed to fetch analytics:', error);
      // Use mock data on error
      setAnalytics({
        totalResumes: 45,
        engineerTypes: {
          'Software Engineer': 12,
          'Frontend Developer': 8,
          'Backend Developer': 6,
          'Full Stack Developer': 10,
          'Data Engineer': 4,
          'DevOps Engineer': 3,
          'Mobile Developer': 2
        },
        recentUploads: [
          { date: 'Mon', count: 5 },
          { date: 'Tue', count: 8 },
          { date: 'Wed', count: 3 },
          { date: 'Thu', count: 12 },
          { date: 'Fri', count: 7 },
          { date: 'Sat', count: 4 },
          { date: 'Sun', count: 6 }
        ],
        processingStats: {
          successful: 42,
          failed: 2,
          pending: 1
        }
      });
    } finally {
      setLoading(false);
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="flex items-center space-x-4">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
          <span className="text-gray-600">Loading dashboard...</span>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Header with Navigation */}
        <div className="mb-8">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-3xl font-bold text-gray-900">CV Analytics Dashboard</h1>
              <p className="text-gray-600 mt-1">
                Welcome back, {user?.firstName || user?.emailAddresses[0]?.emailAddress.split('@')[0]}!
              </p>
            </div>
            <div className="flex space-x-4">
              <Link 
                href="/process" 
                className="bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition-colors font-medium shadow-sm flex items-center space-x-2"
              >
                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
                </svg>
                <span>Process CVs</span>
              </Link>
              <Link 
                href="/resumes" 
                className="bg-green-600 text-white px-6 py-3 rounded-lg hover:bg-green-700 transition-colors font-medium shadow-sm flex items-center space-x-2"
              >
                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                </svg>
                <span>List All Resumes</span>
              </Link>
            </div>
          </div>
        </div>
    try {
      const res = await fetch('/api/get-cvs');
      if (!res.ok) return;
      const data = await res.json();
      // Only use extracted data, no mock/fabricated data
      setResumeSummaries(data.cvs || []);
    } catch (err) {
      setResumeSummaries([]);
    }
  };

  const handleLogout = async () => {
    await logout();
    router.push('/login');
  };

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-lg">Loading...</div>
      </div>
    );
  }

  // if (!user) {
  //   return null; // Will redirect to login
  // }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Ensure buttons are always visible at the top */}
      <div className="w-full flex justify-center items-center py-8 bg-blue-100 border-b-4 border-blue-500 z-50" style={{ position: 'relative' }}>
        <button
          className="bg-blue-700 hover:bg-blue-800 text-white px-10 py-4 rounded-2xl font-extrabold text-2xl shadow-xl border-4 border-blue-400 transition-colors duration-200"
          style={{ minWidth: '240px', letterSpacing: '1px', marginRight: '16px' }}
          onClick={() => setShowList((prev) => !prev)}
          id="list-resumes-btn"
        >
          ðŸ“‹ List Resumes
        </button>
        <button
          className="bg-green-700 hover:bg-green-800 text-white px-10 py-4 rounded-2xl font-extrabold text-2xl shadow-xl border-4 border-green-400 transition-colors duration-200"
          style={{ minWidth: '120px', letterSpacing: '1px' }}
          onClick={() => alert('List button clicked')}
          id="list-btn"
        >
          List
        </button>
      </div>

      {/* Navigation */}
      <nav className="bg-white shadow-sm border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between h-16">
            <div className="flex items-center">
              <h1 className="text-xl font-semibold text-gray-900">CV Review Dashboard</h1>
            </div>
            <div className="flex items-center space-x-4">
              <span className="text-sm text-gray-700">Welcome, {user.email}</span>
              <button
                onClick={handleLogout}
                className="bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded-md text-sm font-medium transition-colors"
              >
                Logout
              </button>
            </div>
          </div>
        </div>
      </nav>

      {/* Main Content */}
      <main className="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
        <div className="px-4 py-6 sm:px-0">
          {/* Stats Cards */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
            <div className="bg-white overflow-hidden shadow rounded-lg">
              <div className="p-5">
                <div className="flex items-center">
                  <div className="flex-shrink-0">
                    <div className="w-8 h-8 bg-blue-500 rounded-md flex items-center justify-center">
                      <span className="text-white text-sm font-bold">ðŸ“„</span>
                    </div>
                  </div>
                  <div className="ml-5 w-0 flex-1">
                    <dl>
                      <dt className="text-sm font-medium text-gray-500 truncate">
                        Total CVs
                      </dt>
                      <dd className="text-lg font-medium text-gray-900">
                        {stats.totalCVs}
                      </dd>
                    </dl>
                  </div>
                </div>
              </div>
            </div>

            <div className="bg-white overflow-hidden shadow rounded-lg">
              <div className="p-5">
                <div className="flex items-center">
                  <div className="flex-shrink-0">
                    <div className="w-8 h-8 bg-green-500 rounded-md flex items-center justify-center">
                      <span className="text-white text-sm font-bold">âœ…</span>
                    </div>
                  </div>
                  <div className="ml-5 w-0 flex-1">
                    <dl>
                      <dt className="text-sm font-medium text-gray-500 truncate">
                        Processed
                      </dt>
                      <dd className="text-lg font-medium text-gray-900">
                        {stats.processedCVs}
                      </dd>
                    </dl>
                  </div>
                </div>
              </div>
            </div>

            <div className="bg-white overflow-hidden shadow rounded-lg">
              <div className="p-5">
                <div className="flex items-center">
                  <div className="flex-shrink-0">
                    <div className="w-8 h-8 bg-purple-500 rounded-md flex items-center justify-center">
                      <span className="text-white text-sm font-bold">ðŸ“Š</span>
                    </div>
                  </div>
                  <div className="ml-5 w-0 flex-1">
                    <dl>
                      <dt className="text-sm font-medium text-gray-500 truncate">
                        Categories
                      </dt>
                      <dd className="text-lg font-medium text-gray-900">
                        {stats.categories}
                      </dd>
                    </dl>
                  </div>
                </div>
              </div>
            </div>
          </div>

          {/* Recent CVs */}
          <div className="bg-white shadow rounded-lg">
            <div className="px-4 py-5 sm:p-6">
              <h3 className="text-lg leading-6 font-medium text-gray-900 mb-4">
                Recent CVs
              </h3>
              <div className="flow-root">
                <ul className="-my-5 divide-y divide-gray-200">
                  {recentCVs.map((cv) => (
                    <li key={cv.id} className="py-4">
                      <div className="flex items-center space-x-4">
                        <div className="flex-shrink-0">
                          <div className="w-8 h-8 bg-gray-300 rounded-md flex items-center justify-center">
                            <span className="text-gray-600 text-xs">ðŸ“„</span>
                          </div>
                        </div>
                        <div className="flex-1 min-w-0">
                          <p className="text-sm font-medium text-gray-900 truncate">
                            {cv.name}
                          </p>
                          <p className="text-sm text-gray-500">
                            Uploaded on {cv.uploadDate}
                          </p>
                        </div>
                        <div className="flex-shrink-0">
                          <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
                            cv.status === 'Processed' 
                              ? 'bg-green-100 text-green-800' 
                              : 'bg-yellow-100 text-yellow-800'
                          }`}>
                            {cv.status}
                          </span>
                        </div>
                      </div>
                    </li>
                  ))}
                </ul>
              </div>
              <div className="mt-6">
                <button 
                  className="w-full bg-blue-500 hover:bg-blue-600 text-white py-2 px-4 rounded-md font-medium transition-colors"
                  onClick={() => router.push('/upload')}
                >
                  Upload New CV
                </button>
              </div>
            </div>
          </div>

          {/* List Button and Filter Section */}
          {showList && (
            <div className="mb-8">
              <label className="mr-2 font-medium">Filter by Job Role:</label>
              <select
                className="border rounded px-2 py-1"
                value={selectedRole}
                onChange={e => setSelectedRole(e.target.value)}
              >
                <option value="">All</option>
                {[...new Set(resumeSummaries.map(cv => cv.role || "N/A"))].map(role => (
                  <option key={role} value={role}>{role}</option>
                ))}
              </select>
              <div className="mt-6">
                <h4 className="text-lg font-semibold mb-2">Resume Summaries</h4>
                {resumeSummaries.length === 0 ? (
                  <div className="text-gray-500 text-sm">No resumes found.</div>
                ) : (
                  <ul className="space-y-4">
                    {resumeSummaries
                      .filter(cv => !selectedRole || (cv.role || "N/A") === selectedRole)
                      .map(cv => (
                        <li key={cv.id} className="bg-white rounded shadow p-4">
                          <div className="font-bold text-gray-900">{cv.fileName || cv.name || "No Name"}</div>
                          <div className="text-sm text-gray-700">
                            Experience: {cv.experience ?? cv.yearsOfExperience ?? "N/A"} years
                          </div>
                          <div className="text-sm text-gray-700">
                            Recommended Roles: {Array.isArray(cv.recommendedRoles) ? cv.recommendedRoles.join(', ') : "N/A"}
                          </div>
                        </li>
                      ))}
                  </ul>
                )}
              </div>
            </div>
          )}
        </div>
      </main>
    </div>
  );
}



