"use client";

import { useState, useCallback, useEffect } from "react";
import { useDropzone } from "react-dropzone";
import { Toaster, toast } from "react-hot-toast";
import Link from "next/link";

export default function HomePage() {
  const [files, setFiles] = useState([]);
  const [processing, setProcessing] = useState(false);
  const [results, setResults] = useState([]);
  const [parsedResults, setParsedResults] = useState(null);
  const [categorizedResults, setCategorizedResults] = useState(null);
  const [error, setError] = useState(null);
  const [activeStep, setActiveStep] = useState(1);
  const [theme, setTheme] = useState("light");

  // Setup dropzone
  const onDrop = useCallback((acceptedFiles) => {
    setFiles(acceptedFiles);
    setResults([]);
    setParsedResults(null);
    setCategorizedResults(null);
    setError(null);
    setActiveStep(1);
    toast.success(`${acceptedFiles.length} file(s) selected`);
  }, []);
  
  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop,
    accept: {
      'application/pdf': ['.pdf']
    },
    maxFiles: 5,
    maxSize: 5 * 1024 * 1024, // 5MB
  });

  // Process CV files
  const processFiles = async () => {
    if (files.length === 0) {
      toast.error("Please select files first");
      return;
    }
    
    setProcessing(true);
    setError(null);
    setActiveStep(2);
    
    try {
      // Step 1: Parse CV files
      const formData = new FormData();
      files.forEach((file) => {
        formData.append("files", file);
      });
      
      const parseResponse = await toast.promise(
        fetch("/api/parse-cv", {
          method: "POST",
          body: formData,
        }),
        {
          loading: 'Parsing CV files...',
          success: 'Files parsed successfully',
          error: 'Failed to parse files'
        }
      );
      
      if (!parseResponse.ok) {
        throw new Error(`Failed to parse files: ${parseResponse.status}`);
      }
      
      const parseData = await parseResponse.json();
      setParsedResults(parseData.results);
      
      // Step 2: Process/categorize CVs
      const processResponse = await toast.promise(
        fetch("/api/process-cv", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ results: parseData.results }),
        }),
        {
          loading: 'Processing and categorizing CVs...',
          success: 'CVs processed successfully',
          error: 'Failed to process CVs'
        }
      );
      
      if (!processResponse.ok) {
        throw new Error(`Failed to process CVs: ${processResponse.status}`);
      }
      
      const processData = await processResponse.json();
      
      // Check if we have an error in the response
      if (processData.error) {
        throw new Error(`API error: ${processData.error}`);
      }
      
      // Validate the categorized data
      if (!processData.categorized || !Array.isArray(processData.categorized)) {
        throw new Error("Invalid response format from CV processing API");
      }
      
      // Handle empty results
      if (processData.categorized.length === 0) {
        throw new Error("No results returned from CV processing");
      }
      
      setCategorizedResults(processData.categorized);
      setActiveStep(3);
    } catch (err) {
      console.error("Error processing files:", err);
      setError(err.message);
      toast.error(`Error: ${err.message}`);
    } finally {
      setProcessing(false);
    }
  };

  // Reset and start over
  const resetForm = () => {
    setFiles([]);
    setResults([]);
    setParsedResults(null);
    setCategorizedResults(null);
    setError(null);
    setActiveStep(1);
    toast.success("Form reset. Start with new files.");
  };

  // Effect to check for system color scheme preference
  useEffect(() => {
    // Check for system preference
    const isDark = window.matchMedia("(prefers-color-scheme: dark)").matches;
    // Check for stored preference
    const storedTheme = localStorage.getItem("theme");
    // Use stored preference if available, otherwise use system preference
    setTheme(storedTheme || (isDark ? "dark" : "light"));
    
    // Listen for changes to color scheme preference
    const mediaQuery = window.matchMedia("(prefers-color-scheme: dark)");
    const handleChange = (e) => setTheme(e.matches ? "dark" : "light");
    mediaQuery.addEventListener("change", handleChange);
    
    return () => mediaQuery.removeEventListener("change", handleChange);
  }, []);

  // Toggle theme function
  const toggleTheme = () => {
    const newTheme = theme === "light" ? "dark" : "light";
    // Update state
    setTheme(newTheme);
    // Store in localStorage for persistence
    localStorage.setItem("theme", newTheme);
  };
  
  return (
    <div className={`min-h-screen ${theme === "dark" ? "bg-slate-900 text-white" : "bg-gradient-to-b from-blue-50 to-white text-gray-900"} transition-colors duration-200`}>
      <Toaster 
        position="top-right"
        toastOptions={{
          duration: 3000,
          style: theme === "dark" ? {
            background: '#1e293b',
            color: '#fff',
            border: '1px solid #334155'
          } : {}
        }}
      />
      
      <nav className={`w-full py-4 px-6 ${theme === "dark" ? "bg-slate-800" : "bg-white"} shadow-sm sticky top-0 z-10 transition-colors duration-200`}>
        <div className="max-w-7xl mx-auto flex justify-between items-center">
          <div className="flex items-center">
            <div className={`p-2 rounded-full ${theme === "dark" ? "bg-blue-900" : "bg-blue-100"} mr-3`}>
              <svg xmlns="http://www.w3.org/2000/svg" className={`h-6 w-6 ${theme === "dark" ? "text-blue-400" : "text-blue-600"}`} viewBox="0 0 20 20" fill="currentColor">
                <path d="M9 2a1 1 0 000 2h2a1 1 0 100-2H9z" />
                <path fillRule="evenodd" d="M4 5a2 2 0 012-2 3 3 0 003 3h2a3 3 0 003-3 2 2 0 012 2v11a2 2 0 01-2 2H6a2 2 0 01-2-2V5zm3 4a1 1 0 000 2h.01a1 1 0 100-2H7zm3 0a1 1 0 000 2h3a1 1 0 100-2h-3zm-3 4a1 1 0 100 2h.01a1 1 0 100-2H7zm3 0a1 1 0 100 2h3a1 1 0 100-2h-3z" clipRule="evenodd" />
              </svg>
            </div>
            <h1 className="text-2xl font-bold">CV Review App</h1>
          </div>
          
          <div className="flex items-center gap-4">
            <button onClick={toggleTheme} className="p-2 rounded-full hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors">
              {theme === "dark" ? (
                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                  <path fillRule="evenodd" d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z" clipRule="evenodd" />
                </svg>
              ) : (
                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                  <path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z" />
                </svg>
              )}
            </button>
            <Link href="/summaries" className={`${theme === "dark" ? "text-blue-400 hover:text-blue-300" : "text-blue-600 hover:text-blue-500"} font-medium transition-colors`}>
              All Summaries
            </Link>
            <Link href="/debug" className={`${theme === "dark" ? "text-gray-400 hover:text-gray-300" : "text-gray-600 hover:text-gray-500"} text-sm transition-colors`}>
              Debug
            </Link>
          </div>
        </div>
      </nav>
      
      <div className="max-w-4xl mx-auto py-6 px-4">
        <header className="mb-6 text-center">
          <h1 className={`text-2xl font-semibold ${theme === "dark" ? "text-white" : "text-gray-800"} mb-2`}>
            CV Review App
          </h1>
          <p className={`text-sm ${theme === "dark" ? "text-gray-300" : "text-gray-600"} max-w-3xl mx-auto`}>
            Upload CV files for AI-powered analysis and job role matching
          </p>
        </header>
        
        <div className={`${theme === "dark" ? "bg-slate-800 ring-1 ring-slate-700" : "bg-white ring-1 ring-gray-200"} p-6 rounded-md shadow-sm mb-6 transition-colors duration-200`}>
          {/* Progress Indicator */}
          <div className="max-w-3xl mx-auto mb-10">
            <div className="relative">
              {/* Progress bar background */}
              <div className={`absolute top-1/2 left-0 w-full h-1 -translate-y-1/2 ${theme === "dark" ? "bg-slate-700" : "bg-gray-200"}`}></div>
              
              {/* Progress bar indicator */}
              <div 
                className={`absolute top-1/2 left-0 h-1 -translate-y-1/2 transition-all duration-500 ${theme === "dark" ? "bg-blue-500" : "bg-blue-600"}`} 
                style={{ width: activeStep === 1 ? '0%' : activeStep === 2 ? '50%' : '100%' }}
              ></div>
              
              {/* Step indicators */}
              <div className="relative flex justify-between">
                {[
                  { step: 1, label: "Upload Files", icon: (
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
                    </svg>
                  )},
                  { step: 2, label: "Process CVs", icon: (
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                    </svg>
                  )},
                  { step: 3, label: "View Results", icon: (
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                    </svg>
                  )},
                ].map(({step, label, icon}) => (
                  <div key={step} className="text-center">
                    <div 
                      className={`w-12 h-12 rounded-full flex items-center justify-center mx-auto ${
                        activeStep === step 
                          ? theme === "dark" ? "bg-blue-900 ring-4 ring-blue-500/30 text-blue-400" : "bg-blue-600 ring-4 ring-blue-200 text-white" 
                          : activeStep > step 
                            ? theme === "dark" ? "bg-green-800 text-green-400" : "bg-green-600 text-white" 
                            : theme === "dark" ? "bg-slate-700 text-slate-400" : "bg-gray-200 text-gray-500"
                      } transition-all duration-300`}
                    >
                      {activeStep > step ? (
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                        </svg>
                      ) : icon}
                    </div>
                    <div className={`mt-2 font-medium ${
                      activeStep === step 
                        ? theme === "dark" ? "text-blue-400" : "text-blue-700"
                        : activeStep > step 
                          ? theme === "dark" ? "text-green-400" : "text-green-700"
                          : theme === "dark" ? "text-slate-400" : "text-gray-500"
                    }`}>
                      {label}
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
          
          {/* Step 1: File Upload */}
          {activeStep === 1 && (
            <div className="space-y-6">
              <div 
                {...getRootProps()} 
                className={`
                  border-2 border-dashed rounded-lg p-8 text-center cursor-pointer transition-all duration-300
                  ${theme === "dark" 
                    ? isDragActive 
                      ? "border-blue-400 bg-blue-900/30" 
                      : "border-slate-600 hover:border-blue-500 hover:bg-slate-700/50"
                    : isDragActive 
                      ? "border-blue-500 bg-blue-50" 
                      : "border-gray-300 hover:border-blue-400 hover:bg-gray-50"
                  }
                `}
              >
                <input {...getInputProps()} />
                <div>
                  {isDragActive ? (
                    <p className={`text-lg font-medium ${theme === "dark" ? "text-blue-300" : "text-blue-700"}`}>
                      Drop the files here...
                    </p>
                  ) : (
                    <div>
                      <p className={`text-lg font-medium mb-2 ${theme === "dark" ? "text-white" : "text-gray-800"}`}>
                        Drag & drop up to 10 PDFs here
                      </p>
                      <p className={`text-sm ${theme === "dark" ? "text-slate-400" : "text-gray-500"}`}>
                        (Max 5MB per file)
                      </p>
                    </div>
                  )}
                </div>
              </div>
              
              {files.length > 0 && (
                <div className="mt-6">
                  <h3 className={`text-lg font-medium mb-2 ${theme === "dark" ? "text-white" : "text-gray-800"}`}>
                    Uploaded Files ({files.length}/10)
                  </h3>
                  <div className="mb-4">
                    <ul className="space-y-1">
                      {files.map((file, index) => (
                        <li key={index} className={`flex items-center justify-between ${theme === "dark" ? "bg-slate-800" : "bg-gray-50"} p-2 rounded`}>
                          <div className="flex items-center">
                            <p className={`${theme === "dark" ? "text-white" : "text-gray-700"}`}>
                              {file.name} ({(file.size / (1024 * 1024)).toFixed(2)} MB)
                            </p>
                          </div>
                          <button 
                            onClick={(e) => {
                              e.stopPropagation();
                              setFiles(files.filter((_, i) => i !== index));
                              if (files.length === 1) {
                                resetForm();
                              }
                            }}
                            className={`p-1 rounded-full hover:bg-opacity-10 hover:bg-black ${theme === "dark" ? "text-slate-400" : "text-gray-500"}`}
                            title="Remove file"
                          >
                            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                              <path fillRule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clipRule="evenodd" />
                            </svg>
                          </button>
                        </li>
                      ))}
                    </ul>
                  </div>
                  
                  <div className="flex justify-end">
                    <button
                      onClick={processFiles}
                      disabled={processing}
                      className={`
                        px-6 py-2 font-medium text-white rounded shadow-sm
                        ${theme === "dark" 
                          ? "bg-blue-600 hover:bg-blue-700 disabled:bg-blue-800 disabled:text-blue-300" 
                          : "bg-blue-600 hover:bg-blue-700 disabled:bg-blue-300"
                        }
                        transition-all duration-200 focus:outline-none
                      `}
                    >
                      {processing ? (
                        <>
                          <svg className="animate-spin -ml-1 mr-2 inline-block h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                            <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                            <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                          </svg>
                          Processing...
                        </>
                      ) : (
                        <>
                          Process CVs
                        </>
                      )}
                    </button>
                  </div>
                </div>
              )}
            </div>
          )}
          
          {/* Step 2: Processing */}
          {activeStep === 2 && processing && (
            <div className="text-center py-12">
              <div className="animate-spin rounded-full h-16 w-16 border-t-2 border-b-2 border-blue-600 mx-auto"></div>
              <p className="mt-4 text-lg">Processing your files...</p>
              <p className="text-sm text-gray-500 mt-1">This might take a moment</p>
            </div>
          )}
          
          {/* Step 3: Results */}
          {activeStep === 3 && categorizedResults && (
            <div className="space-y-6">
              <h2 className="text-xl font-semibold mb-4">Results ({categorizedResults.length} files processed)</h2>
              
              <div className="space-y-4">
                {categorizedResults.map((result, index) => (
                  <div key={index} className="bg-white rounded-lg p-6 border border-gray-200 shadow-sm">
                    <div className="flex items-center justify-between mb-2">
                      <h3 className="text-lg font-medium uppercase">{result.name || "UNNAMED"}</h3>
                      <span className="text-gray-500 text-sm">{result.fileName}</span>
                    </div>
                    
                    <div className="mb-3">
                      <span className={`px-3 py-1 rounded-md text-sm font-medium bg-blue-100 text-blue-800`}>
                        {result.category}
                      </span>
                    </div>
                    
                    <div className="space-y-2 text-gray-700">
                      {result.jobTitle && (
                        <div className="text-sm">
                          <span className="font-medium">Current Role:</span> {result.jobTitle}
                        </div>
                      )}
                      
                      {result.yearsOfExperience !== undefined && (
                        <div className="text-sm">
                          <span className="font-medium">Experience:</span> {result.yearsOfExperience > 0 ? `${result.yearsOfExperience} years` : "No experience"}
                        </div>
                      )}
                      
                      {result.email && (
                        <div className="text-sm">
                          <span className="font-medium">Email:</span> {result.email}
                        </div>
                      )}
                      
                      {result.collegeName && (
                        <div className="text-sm">
                          <span className="font-medium">Education:</span> {result.collegeName}
                        </div>
                      )}
                      
                      {result.recommendedRoles && result.recommendedRoles.length > 0 && (
                        <div className="mt-3">
                          <p className="font-medium text-sm">Recommended Roles:</p>
                          <div className="flex flex-wrap gap-2 mt-1">
                            {result.recommendedRoles.map((role, i) => (
                              <span key={i} className="bg-green-50 border border-green-200 px-3 py-1 rounded-md text-sm">
                                {role.name}
                                {role.percentage && <span className="ml-1 text-green-700">{role.percentage}%</span>}
                              </span>
                            ))}
                          </div>
                        </div>
                      )}
                      
                      {result.professionalSummary && (
                        <div className="text-sm mt-3">
                          <span className="font-medium">Professional Summary:</span>
                          <p className="mt-1 text-gray-600">{result.professionalSummary}</p>
                        </div>
                      )}
                      
                      {result.skills && result.skills.length > 0 && (
                        <div className="mt-3">
                          <p className="font-medium text-sm">Skills:</p>
                          <div className="flex flex-wrap gap-1 mt-1">
                            {typeof result.skills === 'string' 
                              ? JSON.parse(result.skills).map((skill, i) => (
                                  <span key={i} className="bg-gray-100 px-2 py-0.5 rounded text-xs">{skill}</span>
                                ))
                              : Array.isArray(result.skills) && result.skills.map((skill, i) => (
                                  <span key={i} className="bg-gray-100 px-2 py-0.5 rounded text-xs">{skill}</span>
                                ))
                            }
                          </div>
                        </div>
                      )}
                    </div>
                  </div>
                ))}
              </div>
              
              <div className="pt-4 flex space-x-3">
                <button
                  onClick={resetForm}
                  className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                  Process More Files
                </button>
                
                <Link href="/summaries" className="px-4 py-2 border border-gray-300 text-gray-700 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500">
                  View All Summaries
                </Link>
              </div>
            </div>
          )}
          
          {/* Error Display */}
          {error && (
            <div className="bg-red-50 border border-red-200 text-red-800 rounded-md p-4 mt-6">
              <div className="flex">
                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                <span>Error: {error}</span>
              </div>
              <div className="mt-2 text-sm">
                <p>Please try again or contact support if the problem persists.</p>
              </div>
            </div>
          )}
        </div>
        
        <div className="mt-8 text-center text-gray-500 text-sm">
          <p>
            CV Review App © {new Date().getFullYear()} | 
            <Link href="/debug" className="text-blue-600 hover:underline ml-1">Debug</Link>
          </p>
        </div>
      </div>
    </div>
  );
}