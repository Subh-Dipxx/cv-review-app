"use client";

import { useState, useCallback } from "react";
import { useDropzone } from "react-dropzone";
import { Toaster, toast } from "react-hot-toast";

export default function HomePage() {
  const [files, setFiles] = useState([]);
  const [processing, setProcessing] = useState(false);
  const [results, setResults] = useState([]);
  const [error, setError] = useState(null);

  // Setup dropzone
  const onDrop = useCallback((acceptedFiles) => {
    setFiles(acceptedFiles);
    setResults([]);
    setError(null);
    toast.success(`${acceptedFiles.length} file(s) selected`);
  }, []);
  
  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop,
    accept: {
      'application/pdf': ['.pdf']
    },
    maxFiles: 10,
    maxSize: 5 * 1024 * 1024, // 5MB
  });

  // Process CV files
  const processFiles = async () => {
    if (files.length === 0) {
      toast.error("Please select files first");
      return;
    }
    
    setProcessing(true);
    setError(null);
    
    try {
      // Step 1: Parse CV files
      const formData = new FormData();
      files.forEach((file) => {
        formData.append("files", file);
      });
      
      const parseResponse = await toast.promise(
        fetch("/api/parse-cv", {
          method: "POST",
          body: formData,
        }),
        {
          loading: 'Parsing CV files...',
          success: 'Files parsed successfully',
          error: 'Failed to parse files'
        }
      );
      
      if (!parseResponse.ok) {
        throw new Error(`Failed to parse files: ${parseResponse.status}`);
      }
      
      const parseData = await parseResponse.json();
      
      // Step 2: Process/categorize CVs
      const processResponse = await toast.promise(
        fetch("/api/process-cv", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ results: parseData.results }),
        }),
        {
          loading: 'Processing and categorizing CVs...',
          success: 'CVs processed successfully',
          error: 'Failed to process CVs'
        }
      );
      
      if (!processResponse.ok) {
        throw new Error(`Failed to process CVs: ${processResponse.status}`);
      }
      
      const processData = await processResponse.json();
      
      // Check if we have an error in the response
      if (processData.error) {
        throw new Error(`API error: ${processData.error}`);
      }
      
      if (!processData.categorized || !Array.isArray(processData.categorized)) {
        throw new Error('Invalid response format from API');
      }

      setResults(processData.categorized);
      
    } catch (err) {
      console.error("Error processing files:", err);
      setError(err.message);
      toast.error(`Error: ${err.message}`);
    } finally {
      setProcessing(false);
    }
  };

  return (
    <main className="min-h-screen p-6 bg-gray-50">
      <Toaster position="top-right" />
      
      <div className="max-w-4xl mx-auto">
        {/* Upload Area */}
        <div className="bg-white rounded-lg shadow-sm p-6 mb-6">
          <div
            {...getRootProps()}
            className="border-2 border-dashed border-gray-300 rounded-lg p-8 text-center cursor-pointer hover:border-gray-400 transition-colors"
          >
            <input {...getInputProps()} />
            <p className="text-gray-600">
              {isDragActive
                ? "Drop up to 10 PDFs here..."
                : "Drag & drop up to 10 PDFs here, or click to select files"}
            </p>
            <p className="text-gray-400 text-sm mt-1">(Max 5MB per file)</p>
          </div>

          {/* File List */}
          {files.length > 0 && (
            <div className="mt-6">
              <h3 className="text-lg font-medium text-gray-700 mb-2">
                Uploaded Files ({files.length}/10)
              </h3>
              <ul className="space-y-1">
                {files.map((file) => (
                  <li key={file.path} className="text-sm text-gray-600">
                    {file.path} ({(file.size / 1024).toFixed(2)} KB)
                  </li>
                ))}
              </ul>
              <div className="mt-4">
                <button
                  onClick={processFiles}
                  disabled={processing}
                  className="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50 disabled:opacity-50"
                >
                  {processing ? "Processing..." : "Process CVs"}
                </button>
              </div>
            </div>
          )}
        </div>

        {/* Results */}
        {results.length > 0 && (
          <div className="mb-6">
            <h2 className="text-xl font-semibold mb-4 text-gray-800">
              Results ({results.length} files processed)
            </h2>
            <div className="space-y-6">
              {results.map((result, index) => (
                <div key={index} className="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden">
                  <div className="p-5">
                    <div className="flex justify-between items-start">
                      <div>
                        <h3 className="font-semibold text-gray-800 text-lg">
                          {result.name || result.fileName.replace('.pdf', '')}
                        </h3>
                        <p className="text-blue-600">{result.category || 'Software Developer'}</p>
                        <p className="text-gray-500 mt-1">
                          {result.experience || 'Full Stack Developer'}
                        </p>
                        {result.email && (
                          <p className="text-gray-500 text-sm mt-1">Email: {result.email}</p>
                        )}
                        {result.education && (
                          <p className="text-gray-500 text-sm">Education: {result.education}</p>
                        )}
                      </div>
                      <span className="text-xs text-gray-400">
                        {result.fileName}
                      </span>
                    </div>

                    {/* Recommended Roles */}
                    {result.recommendedRoles && result.recommendedRoles.length > 0 && (
                      <div className="mt-4">
                        <h4 className="text-sm font-medium text-gray-700 mb-2">Recommended Roles</h4>
                        <div className="flex flex-wrap gap-2">
                          {result.recommendedRoles.map((role, roleIndex) => (
                            <span
                              key={roleIndex}
                              className="inline-flex items-center px-2.5 py-0.5 rounded-md text-sm bg-green-50 text-green-700"
                            >
                              {role.role} {role.match && `(${role.match}%)`}
                            </span>
                          ))}
                        </div>
                      </div>
                    )}

                    {/* Professional Summary */}
                    {result.summary && (
                      <div className="mt-4">
                        <h4 className="text-sm font-medium text-gray-700 mb-2">Professional Summary</h4>
                        <p className="text-sm text-gray-600">{result.summary}</p>
                      </div>
                    )}

                    {/* Skills */}
                    {result.skills && result.skills.length > 0 && (
                      <div className="mt-4">
                        <h4 className="text-sm font-medium text-gray-700 mb-2">Skills</h4>
                        <div className="flex flex-wrap gap-1">
                          {result.skills.map((skill, skillIndex) => (
                            <span
                              key={skillIndex}
                              className="inline-block px-2 py-1 text-xs bg-gray-100 text-gray-800 rounded"
                            >
                              {skill}
                            </span>
                          ))}
                          {result.skills.length > 0 && (
                            <span className="inline-block px-2 py-1 text-xs bg-gray-100 text-gray-800 rounded">
                              +4 more
                            </span>
                          )}
                        </div>
                      </div>
                    )}
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Error display */}
        {error && (
          <div className="mt-6 bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded relative">
            <strong className="font-bold">Error: </strong>
            <span className="block sm:inline">{error}</span>
          </div>
        )}
      </div>
    </main>
  );
}
