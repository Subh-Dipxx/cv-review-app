"use client";

import { useState, useEffect } from "react";
import { useDropzone } from "react-dropzone";
import toast, { Toaster } from "react-hot-toast";

function Page() {
  const [files, setFiles]          <div className="space-y-4">
            {results.map((result, index) => (
              <div key={index} className="border rounded-md bg-white p-4">
                <div className="flex justify-between items-start">
                  <div>
                    <h3 className="font-medium text-gray-800">
                      {result.name || result.fileName.replace('.pdf', '')}
                    </h3>
                    <p className="text-blue-500 text-sm">{result.category || 'Software Developer'}</p>
                    <p className="text-gray-500 text-sm">
                      {result.experience || 'Full Stack Developer'}
                    </p>
                  </div>
                  <span className="text-xs text-gray-400">
                    {result.fileName}
                  </span>
                </div>
  const [results, setResults] = useState([]);
  const [loading, setLoading] = useState(false);
  
  useEffect(() => {
    // Welcome notification when the app loads for the first time
    toast.success("Welcome to CV Review App! Upload PDFs to get started.", {
      duration: 5000,
      icon: 'ðŸ‘‹',
    });
  }, []);

  const onDrop = (acceptedFiles) => {
    const pdfFiles = acceptedFiles.filter((file) =>
      file.type === "application/pdf"
    );
    
    if (pdfFiles.length === 0) {
      toast.error("Please select only PDF files!");
      return;
    }
    
    if (pdfFiles.length + files.length > 10) {
      toast.error("You can upload a maximum of 10 PDFs!");
      return;
    }
    
    setFiles([...files, ...pdfFiles]);
    toast.success(`${pdfFiles.length} PDF(s) uploaded successfully!`);
  };

  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop,
    accept: { "application/pdf": [".pdf"] },
    maxSize: 5 * 1024 * 1024, // 5MB limit
    multiple: true,
  });

  const removeFile = (index) => {
    const newFiles = files.filter((_, i) => i !== index);
    setFiles(newFiles);
    toast.success("File removed successfully!");
  };

  const clearAll = () => {
    setFiles([]);
    setResults([]);
    toast.success("All files and results cleared!");
  };

  const processCVs = async () => {
    if (files.length === 0) {
      toast.error("Please upload at least one PDF!");
      return;
    }

    setLoading(true);
    setResults([]);

    try {
      toast.loading("Parsing PDFs...", { id: "processing" });

      const formData = new FormData();
      files.forEach((file) => formData.append("files", file));

      const parseResponse = await fetch("/api/parse-cv", {
        method: "POST",
        body: formData,
      });

      let parseData;
      try {
        parseData = await parseResponse.json();
      } catch {
        throw new Error("The server returned an unexpected response. Please check your PDF files or contact support.");
      }

      if (!parseResponse.ok) {
        throw new Error(parseData?.error || `Parse failed with status ${parseResponse.status}`);
      }
      if (parseData?.error) {
        throw new Error(parseData.error);
      }

      toast.loading("Categorizing CVs...", { id: "processing" });

      const processResponse = await fetch("/api/process-cv", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ results: parseData.results }),
      });

      let processData;
      try {
        processData = await processResponse.json();
      } catch {
        throw new Error("The server returned an unexpected response for process-cv.");
      }

      if (!processResponse.ok) {
        throw new Error(processData.error || `Process failed with status ${processResponse.status}`);
      }
      if (processData.error) {
        throw new Error(processData.error);
      }

      setResults(processData.categorized || []);
      toast.success(
        `Successfully processed ${processData.categorized?.length || 0} files!`,
        { id: "processing" }
      );
    } catch (error) {
      console.error("CV processing error:", error);
      toast.error(`Processing failed: ${error.message}`, { id: "processing" });
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gray-100 flex flex-col items-center justify-center p-4">
      <Toaster position="top-center" />
      <div className="flex items-center justify-between w-full max-w-md mb-4">
        <h1 className="text-2xl font-medium text-gray-800">CV Review App</h1>
        {(files.length > 0 || results.length > 0) && (
          <button
            onClick={clearAll}
            className="text-gray-500 hover:text-gray-700 text-xs px-2 py-1 border border-gray-300 rounded"
            disabled={loading}
          >
            Clear
          </button>
        )}
      </div>
      
      <div
        {...getRootProps()}
        className={`border border-dashed p-4 rounded w-full max-w-md text-center cursor-pointer transition-colors ${
          isDragActive 
            ? "border-blue-400 bg-blue-50" 
            : "border-gray-300 bg-white hover:border-gray-400 hover:bg-gray-50"
        }`}
      >
        <input {...getInputProps()} />
        {isDragActive ? (
          <div className="flex flex-col items-center">
            <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 text-blue-500 mb-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M9 19l3 3m0 0l3-3m-3 3V10" />
            </svg>
            <p className="text-blue-600 text-sm">Drop PDFs here</p>
          </div>
        ) : (
          <>
            <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 text-gray-400 mx-auto mb-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
            </svg>
            <p className="text-gray-600 text-sm">Drag & drop PDFs or click to select</p>
            <p className="text-xs text-gray-500 mt-1">Up to 10 files, 5MB each</p>
          </>
        )}
      </div>

      {files.length > 0 && (
        <div className="mt-6 w-full max-w-md">
          <h2 className="text-base font-medium text-gray-700">
            Uploaded Files ({files.length}/10)
          </h2>
          <ul className="mt-2 space-y-1">
            {files.map((file, index) => (
              <li key={index} className="flex justify-between items-center text-gray-700 bg-white p-2 rounded border border-gray-200 hover:bg-gray-50 text-sm">
                <span className="flex-1 truncate">
                  {file.name} <span className="text-gray-400 text-xs">({(file.size / 1024 / 1024).toFixed(2)} MB)</span>
                </span>
                <button
                  onClick={() => removeFile(index)}
                  className="text-gray-400 hover:text-gray-600 ml-2 px-1"
                  disabled={loading}
                  aria-label="Remove file"
                  title="Remove file"
                >
                  Ã—
                </button>
              </li>
            ))}
          </ul>
          <button
            onClick={processCVs}
            disabled={loading}
            className="mt-3 w-full bg-blue-500 text-white px-3 py-2 rounded text-sm disabled:bg-gray-400 hover:bg-blue-600 transition-colors"
          >
            {loading ? "Processing..." : "Process CVs"}
          </button>
        </div>
      )}

      {results.length > 0 && (
        <div className="mt-6 w-full max-w-4xl">
          <h2 className="text-lg font-medium text-gray-700 mb-3">
            Results ({results.length} files processed)
          </h2>
          <div className="space-y-4">
            {results.map((result, index) => (
              <div key={index} className="border rounded bg-white p-4">
                <div className="flex justify-between items-start">
                  <div>
                    <h3 className="font-medium text-gray-800">
                      {result.name || result.fileName.replace('.pdf', '')}
                    </h3>
                    <p className="text-blue-500 text-sm">{result.category || 'Software Developer'}</p>
                    <p className="text-gray-500 text-sm">
                      {result.experience || 'Full Stack Developer'}
                    </p>
                  </div>
                  <span className="text-xs text-gray-400">
                    {result.fileName}
                  </span>
                </div>
                
                {/* Contact Information */}
                <div className="mt-3">
                  <h4 className="text-xs font-medium text-gray-500 mb-1">
                    Contact Information
                  </h4>
                  <div className="bg-gray-50 p-2 rounded">
                    {result.email && (
                      <div className="text-sm mb-1">
                        <span className="text-gray-600">{result.email}</span>
                      </div>
                    )}
                    {result.phone && (
                      <div className="text-sm">
                        <span className="text-gray-600">{result.phone}</span>
                      </div>
                    )}
                  </div>
                </div>
                
                {/* Education */}
                {result.education && (
                  <div className="mt-3">
                    <h4 className="text-xs font-medium text-gray-500 mb-1">
                      Education
                    </h4>
                    <div className="bg-gray-50 p-2 rounded">
                      <p className="text-sm text-gray-600">{result.education}</p>
                    </div>
                  </div>
                )}
                
                {/* Work Experience */}
                {result.experience && (
                  <div className="mt-3">
                    <h4 className="text-xs font-medium text-gray-500 mb-1">
                      Work Experience
                    </h4>
                    <div className="bg-gray-50 p-2 rounded">
                      <p className="text-sm text-gray-600">{result.experience}</p>
                    </div>
                  </div>
                )}
                
                {/* Recommended Roles */}
                {result.recommendedRoles && result.recommendedRoles.length > 0 && (
                  <div className="mt-4">
                    <h4 className="text-sm font-medium text-gray-700 mb-1 flex items-center">
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1 text-gray-500" viewBox="0 0 20 20" fill="currentColor">
                        <path fillRule="evenodd" d="M6 6V5a3 3 0 013-3h2a3 3 0 013 3v1h2a2 2 0 012 2v3.57A22.952 22.952 0 0110 13a22.95 22.95 0 01-8-1.43V8a2 2 0 012-2h2zm2-1a1 1 0 011-1h2a1 1 0 011 1v1H8V5zm1 5a1 1 0 011-1h.01a1 1 0 110 2H10a1 1 0 01-1-1z" clipRule="evenodd" />
                        <path d="M2 13.692V16a2 2 0 002 2h12a2 2 0 002-2v-2.308A24.974 24.974 0 0110 15c-2.796 0-5.487-.46-8-1.308z" />
                      </svg>
                      Recommended Roles
                    </h4>
                    <div className="bg-gray-50 p-3 rounded border border-gray-200">
                      <div className="flex flex-wrap gap-2">
                        {result.recommendedRoles.map((role, roleIndex) => (
                          <div
                            key={roleIndex}
                            className="inline-flex items-center px-3 py-1 rounded-full text-xs bg-green-50 text-green-700 border border-green-100"
                          >
                            <span>{role.role}</span>
                            {role.match && (
                              <span className="ml-1 bg-green-200 text-green-800 px-1.5 py-0.5 rounded-full text-xs">
                                {role.match}%
                              </span>
                            )}
                          </div>
                        ))}
                      </div>
                    </div>
                  </div>
                )}
                
                {/* Professional Summary */}
                {result.summary && (
                  <div className="mt-4">
                    <h4 className="text-sm font-medium text-gray-700 mb-1 flex items-center">
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1 text-gray-500" viewBox="0 0 20 20" fill="currentColor">
                        <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clipRule="evenodd" />
                      </svg>
                      Professional Summary
                    </h4>
                    <div className="bg-gray-50 p-3 rounded border border-gray-200">
                      <p className="text-sm leading-relaxed text-gray-600 italic">"{result.summary}"</p>
                    </div>
                  </div>
                )}
                
                {/* Skills */}
                {result.skills && result.skills.length > 0 && (
                  <div className="mt-4">
                    <h4 className="text-sm font-medium text-gray-700 mb-1 flex items-center">
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1 text-gray-500" viewBox="0 0 20 20" fill="currentColor">
                        <path fillRule="evenodd" d="M11.49 3.17c-.38-1.56-2.6-1.56-2.98 0a1.532 1.532 0 01-2.286.948c-1.372-.836-2.942.734-2.106 2.106.54.886.061 2.042-.947 2.287-1.561.379-1.561 2.6 0 2.978a1.532 1.532 0 01.947 2.287c-.836 1.372.734 2.942 2.106 2.106a1.532 1.532 0 012.287.947c.379 1.561 2.6 1.561 2.978 0a1.533 1.533 0 012.287-.947c1.372.836 2.942-.734 2.106-2.106a1.533 1.533 0 01.947-2.287c1.561-.379 1.561-2.6 0-2.978a1.532 1.532 0 01-.947-2.287c.836-1.372-.734-2.942-2.106-2.106a1.532 1.532 0 01-2.287-.947zM10 13a3 3 0 100-6 3 3 0 000 6z" clipRule="evenodd" />
                      </svg>
                      Skills
                    </h4>
                    <div className="bg-gray-50 p-3 rounded border border-gray-200">
                      <div className="flex flex-wrap gap-2">
                        {result.skills.map((skill, skillIndex) => (
                          <span
                            key={skillIndex}
                            className="inline-flex items-center px-2 py-1 rounded-full text-xs bg-blue-50 text-blue-700 border border-blue-100"
                          >
                            {skill}
                          </span>
                        ))}
                      </div>
                    </div>
                  </div>
                )}
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  );
}

export default Page;