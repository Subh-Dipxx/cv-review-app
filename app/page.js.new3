"use client";

import { useState, useEffect } from "react";
import { useDropzone } from "react-dropzone";
import toast, { Toaster } from "react-hot-toast";
import Link from "next/link";

export default function HomePage() {
  const [files, setFiles] = useState([]);
  const [results, setResults] = useState([]);
  const [loading, setLoading] = useState(false);
  const [activeTab, setActiveTab] = useState('upload');
  const [progress, setProgress] = useState(0);

  useEffect(() => {
    // Simulate progress when loading
    if (loading) {
      const timer = setInterval(() => {
        setProgress((oldProgress) => {
          const newProgress = Math.min(oldProgress + Math.random() * 10, 95);
          return newProgress;
        });
      }, 500);
      
      return () => {
        clearInterval(timer);
        setProgress(0);
      };
    }
  }, [loading]);

  const onDrop = (acceptedFiles) => {
    const pdfFiles = acceptedFiles.filter((file) =>
      file.type === "application/pdf"
    );
    
    if (pdfFiles.length === 0) {
      toast.error("Please select only PDF files!");
      return;
    }
    
    if (pdfFiles.length + files.length > 10) {
      toast.error("You can upload a maximum of 10 PDFs!");
      return;
    }
    
    setFiles([...files, ...pdfFiles]);
    toast.success(`${pdfFiles.length} PDF${pdfFiles.length > 1 ? 's' : ''} uploaded successfully!`);
  };

  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop,
    accept: { "application/pdf": [".pdf"] },
    maxSize: 5 * 1024 * 1024, // 5MB limit
    multiple: true,
  });

  const removeFile = (index) => {
    const newFiles = files.filter((_, i) => i !== index);
    setFiles(newFiles);
    toast.success("File removed successfully!");
  };

  const resetProcess = () => {
    setFiles([]);
    setResults([]);
    setActiveTab('upload');
    toast.success("Process reset successfully!");
  };

  const processCVs = async () => {
    if (files.length === 0) {
      toast.error("Please upload at least one PDF!");
      return;
    }

    setLoading(true);
    setResults([]);

    try {
      toast.loading("Parsing PDFs...", { id: "processing" });

      const formData = new FormData();
      files.forEach((file) => formData.append("files", file));

      const parseResponse = await fetch("/api/parse-cv", {
        method: "POST",
        body: formData,
      });

      let parseData;
      try {
        parseData = await parseResponse.json();
      } catch {
        throw new Error("The server returned an unexpected response. Please check your PDF files or contact support.");
      }

      if (!parseResponse.ok) {
        throw new Error(parseData?.error || `Parse failed with status ${parseResponse.status}`);
      }
      if (parseData?.error) {
        throw new Error(parseData.error);
      }

      toast.loading("Analyzing and categorizing CVs...", { id: "processing" });

      const processResponse = await fetch("/api/process-cv", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ results: parseData.results }),
      });

      let processData;
      try {
        processData = await processResponse.json();
      } catch {
        throw new Error("The server returned an unexpected response for process-cv.");
      }

      if (!processResponse.ok) {
        throw new Error(processData.error || `Process failed with status ${processResponse.status}`);
      }
      if (processData.error) {
        throw new Error(processData.error);
      }

      setResults(processData.categorized || []);
      setActiveTab('results');
      toast.success(
        `Successfully analyzed ${processData.categorized?.length || 0} CV${processData.categorized?.length !== 1 ? 's' : ''}!`,
        { id: "processing" }
      );
    } catch (error) {
      console.error("CV processing error:", error);
      toast.error(`Processing failed: ${error.message}`, { id: "processing" });
    } finally {
      setLoading(false);
    }
  };

  return (
    <main className="min-h-screen bg-gradient-to-br from-slate-50 to-slate-100">
      <Toaster position="top-right" />
      
      {/* Header */}
      <header className="bg-white shadow-sm">
        <div className="max-w-6xl mx-auto px-4 py-4 sm:px-6 flex justify-between items-center">
          <div className="flex items-center space-x-2">
            <svg xmlns="http://www.w3.org/2000/svg" className="h-8 w-8 text-indigo-600" viewBox="0 0 20 20" fill="currentColor">
              <path fillRule="evenodd" d="M4 4a2 2 0 012-2h4.586A2 2 0 0112 2.586L15.414 6A2 2 0 0116 7.414V16a2 2 0 01-2 2H6a2 2 0 01-2-2V4zm2 6a1 1 0 011-1h6a1 1 0 110 2H7a1 1 0 01-1-1zm1 3a1 1 0 100 2h6a1 1 0 100-2H7z" clipRule="evenodd" />
            </svg>
            <h1 className="text-xl font-bold text-gray-800">CV Review Assistant</h1>
          </div>
          <nav className="hidden sm:flex space-x-4">
            <Link href="/" className="text-gray-700 hover:text-indigo-600 font-medium transition-colors">
              Home
            </Link>
            <Link href="/summaries" className="text-gray-700 hover:text-indigo-600 font-medium transition-colors">
              Summaries
            </Link>
            <Link href="/debug" className="text-gray-700 hover:text-indigo-600 font-medium transition-colors">
              Debug
            </Link>
          </nav>
        </div>
      </header>
      
      <div className="max-w-6xl mx-auto px-4 py-8 sm:px-6">
        {/* Tab Navigation */}
        <div className="bg-white rounded-t-lg shadow-sm mb-1 border-b border-gray-200">
          <div className="flex overflow-x-auto">
            <button
              onClick={() => !loading && setActiveTab('upload')}
              className={`px-6 py-4 font-medium text-sm border-b-2 whitespace-nowrap ${
                activeTab === 'upload' 
                  ? 'border-indigo-500 text-indigo-600' 
                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
              }`}
              disabled={loading}
            >
              1. Upload CVs
            </button>
            <button
              onClick={() => results.length > 0 && !loading && setActiveTab('results')}
              className={`px-6 py-4 font-medium text-sm border-b-2 whitespace-nowrap ${
                activeTab === 'results' 
                  ? 'border-indigo-500 text-indigo-600' 
                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
              } ${results.length === 0 ? 'opacity-50 cursor-not-allowed' : ''}`}
              disabled={results.length === 0 || loading}
            >
              2. Review Results
            </button>
          </div>
        </div>

        {/* Content Area */}
        <div className="bg-white rounded-b-lg shadow-sm p-6">
          {/* Upload Tab */}
          {activeTab === 'upload' && (
            <div className="space-y-6">
              <div>
                <h2 className="text-lg font-medium text-gray-800">Upload CV Documents</h2>
                <p className="text-sm text-gray-500 mt-1">
                  Upload up to 10 PDF files for analysis and categorization
                </p>
              </div>

              <div
                {...getRootProps()}
                className={`border-2 border-dashed p-8 rounded-lg text-center cursor-pointer transition-colors ${
                  isDragActive 
                    ? "border-indigo-400 bg-indigo-50" 
                    : "border-gray-300 hover:border-gray-400"
                }`}
              >
                <input {...getInputProps()} />
                <svg xmlns="http://www.w3.org/2000/svg" className="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1} d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
                </svg>
                <p className="text-gray-600 mt-4">
                  {isDragActive
                    ? "Drop your CV files here..."
                    : "Drag & drop CV files here, or click to select files"}
                </p>
                <p className="text-gray-400 text-sm mt-1">
                  Accepted format: PDF (Max 5MB per file)
                </p>
              </div>

              {/* File list */}
              {files.length > 0 && (
                <div className="bg-slate-50 rounded-lg p-4 border border-gray-200">
                  <h3 className="font-medium text-gray-700 mb-3 flex items-center justify-between">
                    <span>Uploaded Files ({files.length}/10)</span>
                    <span className="text-xs text-gray-500 font-normal">Click on filename to preview</span>
                  </h3>
                  <ul className="divide-y divide-gray-200 max-h-64 overflow-y-auto">
                    {files.map((file, index) => (
                      <li key={index} className="py-2 flex items-center justify-between text-sm">
                        <div className="flex items-center">
                          <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-red-500 mr-2" viewBox="0 0 20 20" fill="currentColor">
                            <path fillRule="evenodd" d="M4 4a2 2 0 012-2h4.586A2 2 0 0112 2.586L15.414 6A2 2 0 0116 7.414V16a2 2 0 01-2 2H6a2 2 0 01-2-2V4z" clipRule="evenodd" />
                          </svg>
                          <span className="text-gray-700 truncate max-w-xs" title={file.name}>
                            {file.name}
                          </span>
                        </div>
                        <div className="flex items-center">
                          <span className="text-xs text-gray-500 mr-3">
                            {(file.size / 1024 / 1024).toFixed(2)} MB
                          </span>
                          <button
                            onClick={() => removeFile(index)}
                            className="p-1 text-gray-500 hover:text-red-600 transition-colors rounded-full hover:bg-red-50"
                            disabled={loading}
                            title="Remove file"
                          >
                            <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                            </svg>
                          </button>
                        </div>
                      </li>
                    ))}
                  </ul>
                </div>
              )}

              {/* Action buttons */}
              <div className="flex justify-between pt-4 border-t border-gray-100">
                <button
                  onClick={() => setFiles([])}
                  disabled={files.length === 0 || loading}
                  className="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:opacity-50"
                >
                  Clear All
                </button>
                <button
                  onClick={processCVs}
                  disabled={files.length === 0 || loading}
                  className="px-6 py-2 text-sm font-medium text-white bg-indigo-600 rounded-md shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:opacity-50 transition-colors"
                >
                  {loading ? (
                    <span className="flex items-center">
                      <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                        <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                      </svg>
                      Analyzing CVs...
                    </span>
                  ) : (
                    "Start Analysis"
                  )}
                </button>
              </div>

              {/* Progress bar when loading */}
              {loading && (
                <div className="mt-4">
                  <div className="w-full bg-gray-200 rounded-full h-2.5">
                    <div 
                      className="bg-indigo-600 h-2.5 rounded-full transition-all duration-500" 
                      style={{ width: `${progress}%` }}
                    ></div>
                  </div>
                  <p className="text-xs text-gray-500 mt-1 text-right">{Math.round(progress)}%</p>
                </div>
              )}
            </div>
          )}

          {/* Results Tab */}
          {activeTab === 'results' && results.length > 0 && (
            <div>
              <div className="flex justify-between items-center mb-4">
                <h2 className="text-lg font-medium text-gray-800">
                  Analysis Results ({results.length} {results.length === 1 ? 'CV' : 'CVs'})
                </h2>
                <button
                  onClick={resetProcess}
                  className="text-sm font-medium text-indigo-600 hover:text-indigo-800 flex items-center"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                  </svg>
                  Start New Analysis
                </button>
              </div>

              <div className="divide-y divide-gray-200">
                {results.map((result, index) => (
                  <div key={index} className="py-6 first:pt-0 last:pb-0">
                    <div className="bg-white rounded-lg border border-gray-200 overflow-hidden shadow-sm hover:shadow-md transition-shadow">
                      {/* Header with basic info */}
                      <div className="bg-gradient-to-r from-slate-700 to-slate-800 text-white p-4">
                        <div className="flex justify-between items-start">
                          <div>
                            <h3 className="font-semibold text-xl">
                              {result.name || result.fileName.replace('.pdf', '')}
                            </h3>
                            <div className="flex items-center mt-1">
                              <div className="bg-indigo-100 text-indigo-800 text-sm rounded-full px-3 py-0.5 font-medium">
                                {result.category || 'Software Developer'}
                              </div>
                              <span className="mx-2 text-gray-300">•</span>
                              <p className="text-gray-100 text-sm">
                                {result.experience || 'Full Stack Developer'}
                              </p>
                            </div>
                          </div>
                          <div className="flex flex-col items-end">
                            <span className="text-xs text-gray-300 mb-1">
                              {result.fileName}
                            </span>
                            {result.matchScore && (
                              <span className="inline-flex items-center text-xs bg-green-700 text-white px-2 py-1 rounded-full font-medium">
                                Match Score: {result.matchScore}%
                              </span>
                            )}
                          </div>
                        </div>
                      </div>

                      {/* Content grid */}
                      <div className="grid grid-cols-1 lg:grid-cols-3 gap-4 p-4">
                        {/* Left column - Contact & Education */}
                        <div className="space-y-4">
                          {/* Contact Info */}
                          <div className="bg-white rounded-lg border border-gray-200 p-3">
                            <h4 className="text-sm font-medium text-gray-700 mb-2 flex items-center">
                              <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1 text-gray-500" viewBox="0 0 20 20" fill="currentColor">
                                <path d="M2 3a1 1 0 011-1h2.153a1 1 0 01.986.836l.74 4.435a1 1 0 01-.54 1.06l-1.548.773a11.037 11.037 0 006.105 6.105l.774-1.548a1 1 0 011.059-.54l4.435.74a1 1 0 01.836.986V17a1 1 0 01-1 1h-2C7.82 18 2 12.18 2 5V3z" />
                              </svg>
                              Contact Information
                            </h4>
                            <div className="space-y-2">
                              {result.email && (
                                <div className="flex items-start text-sm">
                                  <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-2 text-gray-500 mt-0.5" viewBox="0 0 20 20" fill="currentColor">
                                    <path d="M2.003 5.884L10 9.882l7.997-3.998A2 2 0 0016 4H4a2 2 0 00-1.997 1.884z" />
                                    <path d="M18 8.118l-8 4-8-4V14a2 2 0 002 2h12a2 2 0 002-2V8.118z" />
                                  </svg>
                                  <span className="text-gray-700 break-all">{result.email}</span>
                                </div>
                              )}
                              {result.phone && (
                                <div className="flex items-start text-sm">
                                  <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-2 text-gray-500 mt-0.5" viewBox="0 0 20 20" fill="currentColor">
                                    <path d="M2 3a1 1 0 011-1h2.153a1 1 0 01.986.836l.74 4.435a1 1 0 01-.54 1.06l-1.548.773a11.037 11.037 0 006.105 6.105l.774-1.548a1 1 0 011.059-.54l4.435.74a1 1 0 01.836.986V17a1 1 0 01-1 1h-2C7.82 18 2 12.18 2 5V3z" />
                                  </svg>
                                  <span className="text-gray-700">{result.phone}</span>
                                </div>
                              )}
                            </div>
                          </div>

                          {/* Education */}
                          {result.education && (
                            <div className="bg-white rounded-lg border border-gray-200 p-3">
                              <h4 className="text-sm font-medium text-gray-700 mb-2 flex items-center">
                                <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1 text-gray-500" viewBox="0 0 20 20" fill="currentColor">
                                  <path d="M10.394 2.08a1 1 0 00-.788 0l-7 3a1 1 0 000 1.84L5.25 8.051a.999.999 0 01.356-.257l4-1.714a1 1 0 11.788 1.838L7.667 9.088l1.94.831a1 1 0 00.787 0l7-3a1 1 0 000-1.838l-7-3zM3.31 9.397L5 10.12v4.102a8.969 8.969 0 00-1.05-.174 1 1 0 01-.89-.89 11.115 11.115 0 01.25-3.762zM9.3 16.573A9.026 9.026 0 007 14.935v-3.957l1.818.78a3 3 0 002.364 0l5.508-2.361a11.026 11.026 0 01.25 3.762 1 1 0 01-.89.89 8.968 8.968 0 00-5.35 2.524 1 1 0 01-1.4 0zM6 18a1 1 0 001-1v-2.065a8.935 8.935 0 00-2-.712V17a1 1 0 001 1z" />
                                </svg>
                                Education
                              </h4>
                              <p className="text-sm text-gray-700">{result.education}</p>
                            </div>
                          )}
                        </div>

                        {/* Middle column - Skills & Professional Summary */}
                        <div className="space-y-4 lg:col-span-2">
                          {/* Skills */}
                          {result.skills && result.skills.length > 0 && (
                            <div className="bg-white rounded-lg border border-gray-200 p-3">
                              <h4 className="text-sm font-medium text-gray-700 mb-2 flex items-center">
                                <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1 text-gray-500" viewBox="0 0 20 20" fill="currentColor">
                                  <path fillRule="evenodd" d="M11.49 3.17c-.38-1.56-2.6-1.56-2.98 0a1.532 1.532 0 01-2.286.948c-1.372-.836-2.942.734-2.106 2.106.54.886.061 2.042-.947 2.287-1.561.379-1.561 2.6 0 2.978a1.532 1.532 0 01.947 2.287c-.836 1.372.734 2.942 2.106 2.106a1.532 1.532 0 012.287.947c.379 1.561 2.6 1.561 2.978 0a1.533 1.533 0 012.287-.947c1.372.836 2.942-.734 2.106-2.106a1.533 1.533 0 01.947-2.287c1.561-.379 1.561-2.6 0-2.978a1.532 1.532 0 01-.947-2.287c.836-1.372-.734-2.942-2.106-2.106a1.532 1.532 0 01-2.287-.947zM10 13a3 3 0 100-6 3 3 0 000 6z" clipRule="evenodd" />
                                </svg>
                                Skills
                              </h4>
                              <div className="flex flex-wrap gap-2">
                                {result.skills.map((skill, skillIndex) => (
                                  <span
                                    key={skillIndex}
                                    className="inline-block px-3 py-1 text-xs bg-slate-100 text-slate-800 rounded-full"
                                  >
                                    {skill}
                                  </span>
                                ))}
                              </div>
                            </div>
                          )}

                          {/* Professional Summary */}
                          {result.summary && (
                            <div className="bg-white rounded-lg border border-gray-200 p-3">
                              <h4 className="text-sm font-medium text-gray-700 mb-2 flex items-center">
                                <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1 text-gray-500" viewBox="0 0 20 20" fill="currentColor">
                                  <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-8-3a1 1 0 00-.867.5 1 1 0 11-1.731-1A3 3 0 0113 8a3.001 3.001 0 01-2 2.83V11a1 1 0 11-2 0v-1a1 1 0 011-1 1 1 0 100-2zm0 8a1 1 0 100-2 1 1 0 000 2z" clipRule="evenodd" />
                                </svg>
                                Professional Summary
                              </h4>
                              <p className="text-sm text-gray-700 whitespace-pre-line">{result.summary}</p>
                            </div>
                          )}

                          {/* Recommended Roles */}
                          {result.recommendedRoles && result.recommendedRoles.length > 0 && (
                            <div className="bg-white rounded-lg border border-gray-200 p-3">
                              <h4 className="text-sm font-medium text-gray-700 mb-2 flex items-center">
                                <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1 text-gray-500" viewBox="0 0 20 20" fill="currentColor">
                                  <path fillRule="evenodd" d="M6 6V5a3 3 0 013-3h2a3 3 0 013 3v1h2a2 2 0 012 2v3.57A22.952 22.952 0 0110 13a22.95 22.95 0 01-8-1.43V8a2 2 0 012-2h2zm2-1a1 1 0 011-1h2a1 1 0 011 1v1H8V5zm1 5a1 1 0 011-1h.01a1 1 0 110 2H10a1 1 0 01-1-1z" clipRule="evenodd" />
                                  <path d="M2 13.692V16a2 2 0 002 2h12a2 2 0 002-2v-2.308A24.974 24.974 0 0110 15c-2.796 0-5.487-.46-8-1.308z" />
                                </svg>
                                Recommended Roles
                              </h4>
                              <div className="flex flex-wrap gap-2">
                                {result.recommendedRoles.map((role, roleIndex) => (
                                  <span
                                    key={roleIndex}
                                    className="inline-flex items-center px-3 py-1 rounded-full text-xs bg-green-50 text-green-800 border border-green-200"
                                  >
                                    <span>{role.role}</span>
                                    {role.match && (
                                      <span className="ml-1 bg-green-200 text-green-900 px-1.5 py-0.5 rounded-full text-xs">
                                        {role.match}%
                                      </span>
                                    )}
                                  </span>
                                ))}
                              </div>
                            </div>
                          )}
                        </div>
                      </div>

                      {/* Footer with actions */}
                      <div className="bg-slate-50 px-4 py-3 border-t border-gray-200 flex justify-end space-x-3">
                        <button
                          className="px-3 py-1 text-xs font-medium text-gray-700 bg-white border border-gray-300 rounded-md shadow-sm hover:bg-gray-50"
                        >
                          Download PDF
                        </button>
                        <button
                          className="px-3 py-1 text-xs font-medium text-indigo-700 bg-indigo-50 border border-indigo-200 rounded-md shadow-sm hover:bg-indigo-100"
                        >
                          Full Analysis
                        </button>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>

        {/* Info cards at the bottom */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mt-8">
          <div className="bg-white p-5 rounded-lg shadow-sm border border-gray-200">
            <div className="flex items-center mb-3">
              <div className="p-2 bg-blue-50 rounded-full mr-3">
                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-blue-500" viewBox="0 0 20 20" fill="currentColor">
                  <path d="M9 2a1 1 0 000 2h2a1 1 0 100-2H9z" />
                  <path fillRule="evenodd" d="M4 5a2 2 0 012-2 3 3 0 003 3h2a3 3 0 003-3 2 2 0 012 2v11a2 2 0 01-2 2H6a2 2 0 01-2-2V5zm3 4a1 1 0 000 2h.01a1 1 0 100-2H7zm3 0a1 1 0 000 2h3a1 1 0 100-2h-3zm-3 4a1 1 0 100 2h.01a1 1 0 100-2H7zm3 0a1 1 0 100 2h3a1 1 0 100-2h-3z" clipRule="evenodd" />
                </svg>
              </div>
              <h3 className="font-medium">AI-Powered Analysis</h3>
            </div>
            <p className="text-sm text-gray-600">Our system uses advanced AI to extract key information from CVs and provide meaningful insights.</p>
          </div>
          
          <div className="bg-white p-5 rounded-lg shadow-sm border border-gray-200">
            <div className="flex items-center mb-3">
              <div className="p-2 bg-green-50 rounded-full mr-3">
                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-green-500" viewBox="0 0 20 20" fill="currentColor">
                  <path fillRule="evenodd" d="M6.267 3.455a3.066 3.066 0 001.745-.723 3.066 3.066 0 013.976 0 3.066 3.066 0 001.745.723 3.066 3.066 0 012.812 2.812c.051.643.304 1.254.723 1.745a3.066 3.066 0 010 3.976 3.066 3.066 0 00-.723 1.745 3.066 3.066 0 01-2.812 2.812 3.066 3.066 0 00-1.745.723 3.066 3.066 0 01-3.976 0 3.066 3.066 0 00-1.745-.723 3.066 3.066 0 01-2.812-2.812 3.066 3.066 0 00-.723-1.745 3.066 3.066 0 010-3.976 3.066 3.066 0 00.723-1.745 3.066 3.066 0 012.812-2.812zm7.44 5.252a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
                </svg>
              </div>
              <h3 className="font-medium">Skill Matching</h3>
            </div>
            <p className="text-sm text-gray-600">Match candidates to ideal roles based on their skills, experience, and education.</p>
          </div>
          
          <div className="bg-white p-5 rounded-lg shadow-sm border border-gray-200">
            <div className="flex items-center mb-3">
              <div className="p-2 bg-purple-50 rounded-full mr-3">
                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-purple-500" viewBox="0 0 20 20" fill="currentColor">
                  <path d="M2 10a8 8 0 018-8v8h8a8 8 0 11-16 0z" />
                  <path d="M12 2.252A8.014 8.014 0 0117.748 8H12V2.252z" />
                </svg>
              </div>
              <h3 className="font-medium">Data Visualization</h3>
            </div>
            <p className="text-sm text-gray-600">Get clear visual reports and insights to help with your recruitment decisions.</p>
          </div>
        </div>
      </div>

      {/* Footer */}
      <footer className="bg-slate-800 text-white mt-12 py-6">
        <div className="max-w-6xl mx-auto px-4 sm:px-6">
          <div className="text-center">
            <p className="text-sm text-slate-400">
              © {new Date().getFullYear()} CV Review Assistant. All rights reserved.
            </p>
          </div>
        </div>
      </footer>
    </main>
  );
}
